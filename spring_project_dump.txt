
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>ticket-management</groupId>
    <artifactId>TicketServiceManagementV100</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>TicketServiceManagementV100</name>
    <description>Complete Ticket Service Management System</description>

    <properties>
        <java.version>21</java.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starters -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Database -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Utility -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- File Upload -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.11.0</version>
        </dependency>

        <!-- Development -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
--- File: .mvn\wrapper\maven-wrapper.properties ---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.10/apache-maven-3.9.10-bin.zip


--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\TicketServiceManagementV100Application.java ---
package ticketmanagement.ticketservicemanagementv100;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class TicketServiceManagementV100Application {
    public static void main(String[] args) {
        SpringApplication.run(TicketServiceManagementV100Application.class, args);
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\config\CorsConfig.java ---
package ticketmanagement.ticketservicemanagementv100.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import java.util.Arrays;

@Configuration
public class CorsConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("*")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("*")
                .allowCredentials(false);
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOriginPatterns(Arrays.asList("*"));
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("*"));
        configuration.setAllowCredentials(true);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\controller\AdminController.java ---
package ticketmanagement.ticketservicemanagementv100.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ticketmanagement.ticketservicemanagementv100.dto.UserRegistrationDTO;
import ticketmanagement.ticketservicemanagementv100.dto.CategoryDTO;
import ticketmanagement.ticketservicemanagementv100.entity.User;
import ticketmanagement.ticketservicemanagementv100.entity.TicketCategory;
import ticketmanagement.ticketservicemanagementv100.enums.UserRole;
import ticketmanagement.ticketservicemanagementv100.service.UserService;
import ticketmanagement.ticketservicemanagementv100.service.TicketCategoryService;
import ticketmanagement.ticketservicemanagementv100.util.SecurityUtil;
import ticketmanagement.ticketservicemanagementv100.util.RoleValidator;

import java.util.List;

@RestController
@RequestMapping("/api/admin")
@RequiredArgsConstructor
@CrossOrigin(origins = "*")
public class AdminController {
    private final UserService userService;
    private final TicketCategoryService categoryService;

    @PostMapping("/engineers")
    public ResponseEntity<User> createEngineer(
            @RequestBody UserRegistrationDTO dto,
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "ENGINEER");
        User admin = SecurityUtil.validateAndGetUser(userId, role, username);

        if (!RoleValidator.isAdminEngineer(admin)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        User engineer = new User();
        engineer.setUsername(dto.getUsername());
        engineer.setPassword(dto.getPassword());
        engineer.setFullName(dto.getFullName());
        engineer.setEmail(dto.getEmail());
        engineer.setPhoneNumber(dto.getPhoneNumber());
        engineer.setSpecialization(dto.getSpecialization());
        engineer.setRole(UserRole.ENGINEER);
        engineer.setIsDefaultEngineer(dto.getIsDefaultEngineer() != null ? dto.getIsDefaultEngineer() : false);

        User createdEngineer = userService.createUser(engineer);
        return ResponseEntity.ok(createdEngineer);
    }

    @GetMapping("/users")
    public ResponseEntity<List<User>> getAllUsers(
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "ENGINEER");
        User admin = SecurityUtil.validateAndGetUser(userId, role, username);

        if (!RoleValidator.isAdminEngineer(admin)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        List<User> users = userService.getAllUsers();
        return ResponseEntity.ok(users);
    }

    @DeleteMapping("/users/{id}")
    public ResponseEntity<Void> deleteUser(
            @PathVariable Long id,
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "ENGINEER");
        User admin = SecurityUtil.validateAndGetUser(userId, role, username);

        if (!RoleValidator.isAdminEngineer(admin)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }

    @PostMapping("/categories")
    public ResponseEntity<TicketCategory> createCategory(
            @RequestBody CategoryDTO dto,
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "ENGINEER");
        User admin = SecurityUtil.validateAndGetUser(userId, role, username);

        if (!RoleValidator.isAdminEngineer(admin)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        TicketCategory category = new TicketCategory();
        category.setName(dto.getName());
        category.setDescription(dto.getDescription());

        TicketCategory createdCategory = categoryService.createCategory(category);
        return ResponseEntity.ok(createdCategory);
    }

    @GetMapping("/categories")
    public ResponseEntity<List<TicketCategory>> getAllCategories(
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "ENGINEER");
        User admin = SecurityUtil.validateAndGetUser(userId, role, username);

        if (!RoleValidator.isAdminEngineer(admin)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        List<TicketCategory> categories = categoryService.getAllCategories();
        return ResponseEntity.ok(categories);
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\controller\AuthController.java ---
package ticketmanagement.ticketservicemanagementv100.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ticketmanagement.ticketservicemanagementv100.dto.LoginRequestDTO;
import ticketmanagement.ticketservicemanagementv100.dto.LoginResponseDTO;
import ticketmanagement.ticketservicemanagementv100.entity.User;
import ticketmanagement.ticketservicemanagementv100.service.UserService;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@CrossOrigin(origins = "*")
public class AuthController {
    private final UserService userService;

    @PostMapping("/login")
    public ResponseEntity<LoginResponseDTO> login(@RequestBody LoginRequestDTO credentials) {
        try {
            User user = userService.authenticate(credentials.getUsername(), credentials.getPassword());
            if (user != null) {
                LoginResponseDTO response = new LoginResponseDTO();
                response.setId(user.getId());
                response.setUsername(user.getUsername());
                response.setFullName(user.getFullName());
                response.setRole(user.getRole().toString());
                response.setEmail(user.getEmail());
                response.setPhoneNumber(user.getPhoneNumber());
                response.setAddress(user.getAddress());
                response.setCompanyName(user.getCompanyName());
                response.setSpecialization(user.getSpecialization());
                response.setIsDefaultEngineer(user.getIsDefaultEngineer());
                response.setSuccess(true);
                response.setMessage("Login successful");
                return ResponseEntity.ok(response);
            }

            LoginResponseDTO errorResponse = new LoginResponseDTO();
            errorResponse.setSuccess(false);
            errorResponse.setMessage("Invalid credentials");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);

        } catch (Exception e) {
            LoginResponseDTO errorResponse = new LoginResponseDTO();
            errorResponse.setSuccess(false);
            errorResponse.setMessage("Login failed: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    @PostMapping("/logout")
    public ResponseEntity<LoginResponseDTO> logout() {
        LoginResponseDTO response = new LoginResponseDTO();
        response.setSuccess(true);
        response.setMessage("Logout successful - clear localStorage");
        return ResponseEntity.ok(response);
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\controller\CustomerController.java ---
package ticketmanagement.ticketservicemanagementv100.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ticketmanagement.ticketservicemanagementv100.dto.TicketCreationDTO;
import ticketmanagement.ticketservicemanagementv100.dto.ProfileUpdateDTO;
import ticketmanagement.ticketservicemanagementv100.dto.CommentDTO;
import ticketmanagement.ticketservicemanagementv100.entity.Ticket;
import ticketmanagement.ticketservicemanagementv100.entity.User;
import ticketmanagement.ticketservicemanagementv100.entity.Comment;
import ticketmanagement.ticketservicemanagementv100.service.TicketService;
import ticketmanagement.ticketservicemanagementv100.service.UserService;
import ticketmanagement.ticketservicemanagementv100.service.CommentService;
import ticketmanagement.ticketservicemanagementv100.util.SecurityUtil;

import java.util.List;

@RestController
@RequestMapping("/api/customer")
@RequiredArgsConstructor
@CrossOrigin(origins = "*")
public class CustomerController {
    private final TicketService ticketService;
    private final UserService userService;
    private final CommentService commentService;

    @PostMapping("/tickets")
    public ResponseEntity<Ticket> createTicket(
            @RequestBody TicketCreationDTO dto,
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "CUSTOMER");
        User customer = SecurityUtil.validateAndGetUser(userId, role, username);

        Ticket ticket = ticketService.createCustomerTicket(customer.getId(), dto.getDescription(), dto.getCategoryId());
        return ResponseEntity.ok(ticket);
    }

    @GetMapping("/tickets")
    public ResponseEntity<List<Ticket>> getMyTickets(
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "CUSTOMER");
        User customer = SecurityUtil.validateAndGetUser(userId, role, username);

        List<Ticket> tickets = ticketService.getTicketsForUser(customer);
        return ResponseEntity.ok(tickets);
    }

    @PostMapping("/tickets/{ticketId}/comments")
    public ResponseEntity<Comment> addComment(
            @PathVariable Long ticketId,
            @RequestBody CommentDTO commentDTO,
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "CUSTOMER");
        User customer = SecurityUtil.validateAndGetUser(userId, role, username);

        Ticket ticket = ticketService.findById(ticketId);
        if (!ticket.getCustomer().getId().equals(userId)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        Comment comment = new Comment();
        comment.setContent(commentDTO.getContent());
        comment.setTicket(ticket);
        comment.setAuthor(customer);

        Comment savedComment = commentService.addComment(comment);
        return ResponseEntity.ok(savedComment);
    }

    @PutMapping("/profile")
    public ResponseEntity<User> updateProfile(
            @RequestBody ProfileUpdateDTO dto,
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "CUSTOMER");
        User customer = SecurityUtil.validateAndGetUser(userId, role, username);

        // Update customer-specific fields
        if (dto.getFullName() != null) customer.setFullName(dto.getFullName());
        if (dto.getEmail() != null) customer.setEmail(dto.getEmail());
        if (dto.getPhoneNumber() != null) customer.setPhoneNumber(dto.getPhoneNumber());
        if (dto.getAddress() != null) customer.setAddress(dto.getAddress());
        if (dto.getCompanyName() != null) customer.setCompanyName(dto.getCompanyName());

        User updatedUser = userService.updateUser(customer);
        return ResponseEntity.ok(updatedUser);
    }

    @GetMapping("/tickets/{ticketId}/comments")
    public ResponseEntity<List<Comment>> getTicketComments(
            @PathVariable Long ticketId,
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "CUSTOMER");
        User customer = SecurityUtil.validateAndGetUser(userId, role, username);

        Ticket ticket = ticketService.findById(ticketId);
        if (!ticket.getCustomer().getId().equals(userId)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        List<Comment> comments = commentService.getCommentsByTicket(ticket);
        return ResponseEntity.ok(comments);
    }

}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\controller\EngineerController.java ---
package ticketmanagement.ticketservicemanagementv100.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ticketmanagement.ticketservicemanagementv100.dto.TicketUpdateDTO;
import ticketmanagement.ticketservicemanagementv100.dto.UserRegistrationDTO;
import ticketmanagement.ticketservicemanagementv100.entity.Comment;
import ticketmanagement.ticketservicemanagementv100.entity.Ticket;
import ticketmanagement.ticketservicemanagementv100.entity.User;
import ticketmanagement.ticketservicemanagementv100.enums.UserRole;
import ticketmanagement.ticketservicemanagementv100.service.TicketService;
import ticketmanagement.ticketservicemanagementv100.service.UserService;
import ticketmanagement.ticketservicemanagementv100.util.SecurityUtil;
import ticketmanagement.ticketservicemanagementv100.service.CommentService;

import java.util.List;

@RestController
@RequestMapping("/api/engineer")
@RequiredArgsConstructor
@CrossOrigin(origins = "*")
public class EngineerController {
    private final TicketService ticketService;
    private final UserService userService;
    private final CommentService commentService;

    @GetMapping("/tickets/unassigned")
    public ResponseEntity<List<Ticket>> getUnassignedTickets(
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "ENGINEER");
        SecurityUtil.validateAndGetUser(userId, role, username);

        List<Ticket> tickets = ticketService.getUnassignedTickets();
        return ResponseEntity.ok(tickets);
    }

    @GetMapping("/tickets/assigned")
    public ResponseEntity<List<Ticket>> getAssignedTickets(
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "ENGINEER");
        User engineer = SecurityUtil.validateAndGetUser(userId, role, username);

        List<Ticket> tickets = ticketService.getAssignedTickets(engineer);
        return ResponseEntity.ok(tickets);
    }

    @PutMapping("/tickets/{id}/acknowledge")
    public ResponseEntity<Ticket> acknowledgeTicket(
            @PathVariable Long id,
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "ENGINEER");
        User engineer = SecurityUtil.validateAndGetUser(userId, role, username);

        Ticket ticket = ticketService.acknowledgeTicket(id, engineer);
        return ResponseEntity.ok(ticket);
    }

    @PutMapping("/tickets/{id}/update")
    public ResponseEntity<Ticket> updateTicket(
            @PathVariable Long id,
            @RequestBody TicketUpdateDTO dto,
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "ENGINEER");
        SecurityUtil.validateAndGetUser(userId, role, username);

        Ticket ticket = ticketService.findById(id);
        if (dto.getStatus() != null) ticket.setStatus(dto.getStatus());
        if (dto.getTentativeResolutionDate() != null)
            ticket.setTentativeResolutionDate(dto.getTentativeResolutionDate());
        if (dto.getDescription() != null) ticket.setDescription(dto.getDescription());

        Ticket updatedTicket = ticketService.updateTicket(ticket);
        return ResponseEntity.ok(updatedTicket);
    }

    @DeleteMapping("/tickets/{id}")
    public ResponseEntity<Void> deleteTicket(
            @PathVariable Long id,
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "ENGINEER");
        SecurityUtil.validateAndGetUser(userId, role, username);

        ticketService.deleteTicket(id);
        return ResponseEntity.noContent().build();
    }

    @PostMapping("/customers")
    public ResponseEntity<User> createCustomer(
            @RequestBody UserRegistrationDTO dto,
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "ENGINEER");
        SecurityUtil.validateAndGetUser(userId, role, username);

        User customer = new User();
        customer.setUsername(dto.getUsername());
        customer.setPassword(dto.getPassword());
        customer.setFullName(dto.getFullName());
        customer.setEmail(dto.getEmail());
        customer.setPhoneNumber(dto.getPhoneNumber());
        customer.setAddress(dto.getAddress());
        customer.setCompanyName(dto.getCompanyName());
        customer.setRole(UserRole.CUSTOMER);
        customer.setIsDefaultEngineer(false);

        User createdCustomer = userService.createUser(customer);
        return ResponseEntity.ok(createdCustomer);
    }

    @GetMapping("/tickets/{ticketId}/comments")
    public ResponseEntity<List<Comment>> getTicketComments(
            @PathVariable Long ticketId,
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "ENGINEER");
        SecurityUtil.validateAndGetUser(userId, role, username);

        Ticket ticket = ticketService.findById(ticketId);
        List<Comment> comments = commentService.getCommentsByTicket(ticket);
        return ResponseEntity.ok(comments);
    }

    @GetMapping("/customers")
    public ResponseEntity<List<User>> getAllCustomers(
            @RequestHeader("X-User-ID") Long userId,
            @RequestHeader("X-User-Role") String role,
            @RequestHeader("X-Username") String username) {

        SecurityUtil.validateRole(role, "ENGINEER");
        SecurityUtil.validateAndGetUser(userId, role, username);

        List<User> customers = userService.findByRole(UserRole.CUSTOMER);
        return ResponseEntity.ok(customers);
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\controller\PublicController.java ---
package ticketmanagement.ticketservicemanagementv100.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ticketmanagement.ticketservicemanagementv100.entity.Ticket;
import ticketmanagement.ticketservicemanagementv100.entity.TicketCategory;
import ticketmanagement.ticketservicemanagementv100.service.TicketCategoryService;
import ticketmanagement.ticketservicemanagementv100.service.TicketService;

import java.util.List;

@RestController
@RequestMapping("/api/public")
@RequiredArgsConstructor
@CrossOrigin(origins = "*")
public class PublicController {
    private final TicketCategoryService categoryService;
    private final TicketService ticketService;

    @GetMapping("/categories")
    public ResponseEntity<List<TicketCategory>> getCategories() {
        List<TicketCategory> categories = categoryService.getAllCategories();
        return ResponseEntity.ok(categories);
    }

    @GetMapping("/tickets")
    public ResponseEntity<List<Ticket>> getAllTickets() {
        List<Ticket> tickets = ticketService.getAllTickets();
        return ResponseEntity.ok(tickets);
    }

    @GetMapping("/health")
    public ResponseEntity<String> healthCheck() {
        return ResponseEntity.ok("Application is running");
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\dto\AttachmentDTO.java ---
package ticketmanagement.ticketservicemanagementv100.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

/**
 * DTO for file attachments with comments
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class AttachmentDTO {
    private Long id;
    private String fileName;            // original file name
    private String fileType;            // MIME type
    private Long fileSize;              // file size in bytes
    private String comment;             // optional comment with attachment
    private Long ticketId;              // which ticket this attachment belongs to
    private Long uploadedById;          // who uploaded the file
    private String uploadedByName;      // uploader's name
    private String uploadedByRole;      // uploader's role
    private LocalDateTime uploadedAt;   // upload timestamp
    private String downloadUrl;         // URL for downloading file
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\dto\CategoryDTO.java ---
package ticketmanagement.ticketservicemanagementv100.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO for ticket categories
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class CategoryDTO {
    private String name;
    private String description;
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\dto\CommentDTO.java ---
package ticketmanagement.ticketservicemanagementv100.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;

/**
 * DTO for ticket comments - threaded commenting system
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class CommentDTO {
    private Long id;
    private String content;             // comment text
    private Long ticketId;              // which ticket this comment belongs to
    private Long authorId;              // who wrote the comment
    private String authorName;          // author's full name
    private String authorRole;          // CUSTOMER or ENGINEER
    private LocalDateTime createdAt;    // when comment was created
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\dto\LoginRequestDTO.java ---
package ticketmanagement.ticketservicemanagementv100.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO for login requests - simple header-based authentication
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class LoginRequestDTO {
    private String username;
    private String password;
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\dto\LoginResponseDTO.java ---
package ticketmanagement.ticketservicemanagementv100.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO for login responses - returns user data for frontend storage
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class LoginResponseDTO {
    private Long id;                    // User ID for headers
    private String username;
    private String fullName;
    private String role;
    private String email;
    private String phoneNumber;
    private String address;             // for customers
    private String companyName;         // for customers
    private String specialization;      // for engineers
    private Boolean isDefaultEngineer;  // for admin check
    private boolean success;
    private String message;
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\dto\ProfileUpdateDTO.java ---
package ticketmanagement.ticketservicemanagementv100.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO for profile updates - role-specific field updates
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class ProfileUpdateDTO {
    private String fullName;            // All users can update
    private String email;               // All users can update
    private String phoneNumber;         // All users can update

    // Customer-specific fields
    private String address;             // customers only
    private String companyName;         // customers only

    // Engineer-specific fields
    private String specialization;      // engineers only

    // Password change
    private String currentPassword;     // for password verification
    private String newPassword;         // optional password change
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\dto\TicketCreationDTO.java ---
package ticketmanagement.ticketservicemanagementv100.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * DTO for creating tickets - customers create tickets
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class TicketCreationDTO {
    private String description;         // Required
    private Long categoryId;            // Optional category selection
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\dto\TicketFilterDTO.java ---
package ticketmanagement.ticketservicemanagementv100.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import ticketmanagement.ticketservicemanagementv100.enums.TicketStatus;

/**
 * DTO for filtering/searching tickets
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class TicketFilterDTO {
    private TicketStatus status;        // filter by status
    private Long categoryId;            // filter by category
    private String customerName;        // search by customer name (engineers only)
    private Long assignedEngineerId;    // filter by assigned engineer
    private Boolean unassignedOnly;     // show only unassigned tickets
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\dto\TicketUpdateDTO.java ---
package ticketmanagement.ticketservicemanagementv100.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import ticketmanagement.ticketservicemanagementv100.enums.TicketStatus;

import java.time.LocalDate;

/**
 * DTO for updating tickets - engineers update ticket details
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class TicketUpdateDTO {
    private String description;
    private TicketStatus status;
    private Long categoryId;
    private Long engineerId;                   // for reassignment
    private LocalDate tentativeResolutionDate; // Changed from LocalDateTime
    private String engineerComment;
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\dto\UserRegistrationDTO.java ---
package ticketmanagement.ticketservicemanagementv100.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import ticketmanagement.ticketservicemanagementv100.enums.UserRole;

/**
 * DTO for user registration - used by admin engineers to create accounts
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class UserRegistrationDTO {
    private String username;
    private String password;
    private String fullName;
    private String email;
    private String phoneNumber;

    // Customer-specific fields
    private String address;             // for customers only
    private String companyName;         // for customers only

    // Engineer-specific fields
    private String specialization;      // for engineers only
    private Boolean isDefaultEngineer;  // for admin engineers only

    private UserRole role;              // CUSTOMER or ENGINEER
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\entity\Attachment.java ---
package ticketmanagement.ticketservicemanagementv100.entity;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

@Entity
@Table(name = "attachments")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Attachment {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String fileName;

    @Column(nullable = false)
    private String filePath;

    private String fileType;

    private Long fileSize;

    private String comment;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ticket_id", nullable = false)
    @JsonIgnoreProperties({"comments", "attachments", "customer", "assignedEngineer"})
    private Ticket ticket;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "uploaded_by", nullable = false)
    @JsonIgnoreProperties({"createdTickets", "assignedTickets"})
    private User uploadedBy;

    @Column(nullable = false)
    private LocalDateTime uploadedAt = LocalDateTime.now();
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\entity\Comment.java ---
package ticketmanagement.ticketservicemanagementv100.entity;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;

@Entity
@Table(name = "comments")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Comment {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(columnDefinition = "TEXT", nullable = false)
    private String content;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ticket_id", nullable = false)
    @JsonIgnoreProperties({"comments", "attachments", "customer", "assignedEngineer"})
    private Ticket ticket;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "author_id", nullable = false)
    @JsonIgnoreProperties({"createdTickets", "assignedTickets"})
    private User author;

    @Column(nullable = false)
    private LocalDateTime createdAt = LocalDateTime.now();
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\entity\Ticket.java ---
package ticketmanagement.ticketservicemanagementv100.entity;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import ticketmanagement.ticketservicemanagementv100.enums.TicketStatus;

import java.time.LocalDateTime;
import java.time.LocalDate;
import java.util.List;

@Entity
@Table(name = "tickets")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Ticket {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String title;

    @Column(columnDefinition = "TEXT")
    private String description;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private TicketStatus status = TicketStatus.CREATED;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "customer_id", nullable = false)
    @JsonIgnoreProperties({"createdTickets", "assignedTickets"})
    private User customer;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "assigned_engineer_id")
    @JsonIgnoreProperties({"createdTickets", "assignedTickets"})
    private User assignedEngineer;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "category_id")
    private TicketCategory category;

    // 🔄 CHANGED: LocalDateTime → LocalDate
    private LocalDate tentativeResolutionDate;

    @Column(nullable = false)
    private LocalDateTime createdAt = LocalDateTime.now();

    @Column(nullable = false)
    private LocalDateTime updatedAt = LocalDateTime.now();

    @OneToMany(mappedBy = "ticket", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Comment> comments;

    @OneToMany(mappedBy = "ticket", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Attachment> attachments;
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\entity\TicketCategory.java ---
package ticketmanagement.ticketservicemanagementv100.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Entity
@Table(name = "ticket_categories")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class TicketCategory {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String name;

    private String description;

    @OneToMany(mappedBy = "category", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JsonIgnore
    private List<Ticket> tickets;
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\entity\User.java ---
package ticketmanagement.ticketservicemanagementv100.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import ticketmanagement.ticketservicemanagementv100.enums.UserRole;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "users")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String username;

    @Column(nullable = false)
    private String password;

    @Column(nullable = false)
    private String fullName;

    @Column(nullable = false)
    private String email;

    private String phoneNumber;
    private String address;                        // For customers
    private String specialization;                 // For engineers
    private String companyName;                    // 🔥 NEW - For customers
    private Boolean isDefaultEngineer = false;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private UserRole role;

    @Column(nullable = false)
    private LocalDateTime createdAt = LocalDateTime.now();

    @Column(nullable = false)
    private LocalDateTime updatedAt = LocalDateTime.now();

    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JsonIgnore
    private List<Ticket> createdTickets = new ArrayList<>();

    @OneToMany(mappedBy = "assignedEngineer", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JsonIgnore
    private List<Ticket> assignedTickets = new ArrayList<>();
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\enums\TicketStatus.java ---
package ticketmanagement.ticketservicemanagementv100.enums;

public enum TicketStatus {
    CREATED, ACKNOWLEDGED, IN_PROGRESS, CLOSED
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\enums\UserRole.java ---
package ticketmanagement.ticketservicemanagementv100.enums;

public enum UserRole {
    CUSTOMER, ENGINEER
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\exception\GlobalExceptionHandler.java ---
package ticketmanagement.ticketservicemanagementv100.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import java.util.HashMap;
import java.util.Map;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(UnauthorizedException.class)
    public ResponseEntity<Map<String, Object>> handleUnauthorized(UnauthorizedException e) {
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("message", e.getMessage());
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
    }

    @ExceptionHandler(UserNotFoundException.class)
    public ResponseEntity<Map<String, Object>> handleUserNotFound(UserNotFoundException e) {
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("message", e.getMessage());
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
    }

    @ExceptionHandler(TicketNotFoundException.class)
    public ResponseEntity<Map<String, Object>> handleTicketNotFound(TicketNotFoundException e) {
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("message", e.getMessage());
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\exception\TicketNotFoundException.java ---
package ticketmanagement.ticketservicemanagementv100.exception;

public class TicketNotFoundException extends RuntimeException {
    public TicketNotFoundException(String message) {
        super(message);
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\exception\UnauthorizedException.java ---
package ticketmanagement.ticketservicemanagementv100.exception;

public class UnauthorizedException extends RuntimeException {
    public UnauthorizedException(String message) {
        super(message);
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\exception\UserNotFoundException.java ---
package ticketmanagement.ticketservicemanagementv100.exception;

public class UserNotFoundException extends RuntimeException {
    public UserNotFoundException(String message) {
        super(message);
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\repository\AttachmentRepository.java ---
package ticketmanagement.ticketservicemanagementv100.repository;

import ticketmanagement.ticketservicemanagementv100.entity.Attachment;
import ticketmanagement.ticketservicemanagementv100.entity.Ticket;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface AttachmentRepository extends JpaRepository<Attachment, Long> {
    List<Attachment> findByTicket(Ticket ticket);
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\repository\CommentRepository.java ---
package ticketmanagement.ticketservicemanagementv100.repository;

import ticketmanagement.ticketservicemanagementv100.entity.Comment;
import ticketmanagement.ticketservicemanagementv100.entity.Ticket;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface CommentRepository extends JpaRepository<Comment, Long> {
    List<Comment> findByTicketOrderByCreatedAtAsc(Ticket ticket);
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\repository\TicketCategoryRepository.java ---
package ticketmanagement.ticketservicemanagementv100.repository;

import ticketmanagement.ticketservicemanagementv100.entity.TicketCategory;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface TicketCategoryRepository extends JpaRepository<TicketCategory, Long> {
    Optional<TicketCategory> findByName(String name);
    boolean existsByName(String name);
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\repository\TicketRepository.java ---
package ticketmanagement.ticketservicemanagementv100.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import ticketmanagement.ticketservicemanagementv100.entity.Ticket;
import ticketmanagement.ticketservicemanagementv100.entity.User;
import ticketmanagement.ticketservicemanagementv100.enums.TicketStatus;

import java.util.List;

@Repository
public interface TicketRepository extends JpaRepository<Ticket, Long> {
    List<Ticket> findByCustomer(User customer);
    List<Ticket> findByAssignedEngineer(User engineer);
    List<Ticket> findByAssignedEngineerIsNull();
    List<Ticket> findByStatus(TicketStatus status);
    List<Ticket> findByCategoryId(Long categoryId);

    @Query("SELECT t FROM Ticket t WHERE t.customer = :user AND " +
            "(:status IS NULL OR t.status = :status) AND " +
            "(:categoryId IS NULL OR t.category.id = :categoryId)")
    List<Ticket> findCustomerTicketsWithFilters(@Param("user") User user,
                                                @Param("status") TicketStatus status,
                                                @Param("categoryId") Long categoryId);

    @Query("SELECT t FROM Ticket t WHERE " +
            "(:status IS NULL OR t.status = :status) AND " +
            "(:categoryId IS NULL OR t.category.id = :categoryId) AND " +
            "(:customerName IS NULL OR LOWER(t.customer.fullName) LIKE LOWER(CONCAT('%', :customerName, '%')))")
    List<Ticket> findTicketsWithFilters(@Param("status") TicketStatus status,
                                        @Param("categoryId") Long categoryId,
                                        @Param("customerName") String customerName);

    List<Ticket> findByCustomerId(Long customerId);
    List<Ticket> findByAssignedEngineerId(Long engineerId);
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\repository\UserRepository.java ---
package ticketmanagement.ticketservicemanagementv100.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import ticketmanagement.ticketservicemanagementv100.entity.User;
import ticketmanagement.ticketservicemanagementv100.enums.UserRole;

import java.util.List;
import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
    Optional<User> findByUsernameAndPassword(String username, String password);
    List<User> findByRole(UserRole role);
    Optional<User> findByIsDefaultEngineerTrue();
    boolean existsByUsername(String username);
    boolean existsByEmail(String email);
    List<User> findByIsDefaultEngineerFalse();
    Optional<User> findByEmail(String email);
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\service\AttachmentService.java ---
package ticketmanagement.ticketservicemanagementv100.service;

import ticketmanagement.ticketservicemanagementv100.entity.Attachment;
import ticketmanagement.ticketservicemanagementv100.entity.Ticket;
import ticketmanagement.ticketservicemanagementv100.entity.User;
import ticketmanagement.ticketservicemanagementv100.repository.AttachmentRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class AttachmentService {
    private final AttachmentRepository attachmentRepository;
    private final String uploadDir = "uploads/";

    public Attachment saveAttachment(MultipartFile file, Ticket ticket, String comment, User uploadedBy) throws IOException {
        File directory = new File(uploadDir);
        if (!directory.exists()) {
            directory.mkdirs();
        }

        String fileName = UUID.randomUUID().toString() + "_" + file.getOriginalFilename();
        Path filePath = Paths.get(uploadDir + fileName);

        Files.write(filePath, file.getBytes());

        Attachment attachment = new Attachment();
        attachment.setFileName(file.getOriginalFilename());
        attachment.setFilePath(filePath.toString());
        attachment.setFileType(file.getContentType());
        attachment.setFileSize(file.getSize());
        attachment.setComment(comment);
        attachment.setTicket(ticket);
        attachment.setUploadedBy(uploadedBy);
        attachment.setUploadedAt(LocalDateTime.now());

        return attachmentRepository.save(attachment);
    }

    public List<Attachment> getAttachmentsByTicket(Ticket ticket) {
        return attachmentRepository.findByTicket(ticket);
    }

    public Attachment findById(Long id) {
        return attachmentRepository.findById(id).orElse(null);
    }

    public byte[] downloadAttachment(Long attachmentId) throws IOException {
        Attachment attachment = findById(attachmentId);
        if (attachment != null) {
            Path filePath = Paths.get(attachment.getFilePath());
            return Files.readAllBytes(filePath);
        }
        return null;
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\service\AuthService.java ---
package ticketmanagement.ticketservicemanagementv100.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import ticketmanagement.ticketservicemanagementv100.entity.User;

@Service
@RequiredArgsConstructor
public class AuthService {
    private final UserService userService;

    public User authenticate(String username, String password) {
        return userService.authenticate(username, password);
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\service\CommentService.java ---
package ticketmanagement.ticketservicemanagementv100.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import ticketmanagement.ticketservicemanagementv100.entity.Comment;
import ticketmanagement.ticketservicemanagementv100.entity.Ticket;
import ticketmanagement.ticketservicemanagementv100.repository.CommentRepository;

import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
public class CommentService {
    private final CommentRepository commentRepository;

    public Comment addComment(Comment comment) {
        comment.setCreatedAt(LocalDateTime.now());
        return commentRepository.save(comment);
    }

    public List<Comment> getCommentsByTicket(Ticket ticket) {
        return commentRepository.findByTicketOrderByCreatedAtAsc(ticket);
    }

    public Comment findById(Long id) {
        return commentRepository.findById(id).orElse(null);
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\service\TicketCategoryService.java ---
package ticketmanagement.ticketservicemanagementv100.service;

import ticketmanagement.ticketservicemanagementv100.entity.TicketCategory;
import ticketmanagement.ticketservicemanagementv100.repository.TicketCategoryRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class TicketCategoryService {
    private final TicketCategoryRepository categoryRepository;

    public TicketCategory createCategory(TicketCategory category) {
        if (categoryRepository.existsByName(category.getName())) {
            throw new RuntimeException("Category name already exists");
        }
        return categoryRepository.save(category);
    }

    public TicketCategory updateCategory(TicketCategory category) {
        return categoryRepository.save(category);
    }

    public void deleteCategory(Long id) {
        categoryRepository.deleteById(id);
    }

    public TicketCategory findById(Long id) {
        return categoryRepository.findById(id).orElse(null);
    }

    public TicketCategory findByName(String name) {
        return categoryRepository.findByName(name).orElse(null);
    }

    public List<TicketCategory> getAllCategories() {
        return categoryRepository.findAll();
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\service\TicketService.java ---
package ticketmanagement.ticketservicemanagementv100.service;

import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import ticketmanagement.ticketservicemanagementv100.entity.Ticket;
import ticketmanagement.ticketservicemanagementv100.entity.User;
import ticketmanagement.ticketservicemanagementv100.entity.TicketCategory;
import ticketmanagement.ticketservicemanagementv100.enums.TicketStatus;
import ticketmanagement.ticketservicemanagementv100.enums.UserRole;
import ticketmanagement.ticketservicemanagementv100.repository.TicketRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class TicketService {
    private final TicketRepository ticketRepository;
    private final UserService userService;
    private final TicketCategoryService categoryService;

    public Ticket createTicket(Ticket ticket) {
        ticket.setStatus(TicketStatus.CREATED);
        ticket.setCreatedAt(LocalDateTime.now());
        ticket.setUpdatedAt(LocalDateTime.now());
        return ticketRepository.save(ticket);
    }

    public Ticket createCustomerTicket(Long customerId, String description, Long categoryId) {
        User customer = userService.findById(customerId);
        if (customer == null || customer.getRole() != UserRole.CUSTOMER) {
            throw new EntityNotFoundException("Customer not found");
        }

        Ticket ticket = new Ticket();
        ticket.setTitle("Ticket from " + customer.getFullName());
        ticket.setDescription(description);
        ticket.setCustomer(customer);
        ticket.setStatus(TicketStatus.CREATED);

        if (categoryId != null) {
            TicketCategory category = categoryService.findById(categoryId);
            ticket.setCategory(category);
        }

        return createTicket(ticket);
    }

    public Ticket updateTicket(Ticket ticket) {
        ticket.setUpdatedAt(LocalDateTime.now());
        return ticketRepository.save(ticket);
    }

    public Ticket findById(Long id) {
        return ticketRepository.findById(id).orElse(null);
    }

    public Optional<Ticket> getTicketById(Long id) {
        return ticketRepository.findById(id);
    }

    public List<Ticket> getTicketsForUser(User user) {
        if (user.getRole() == UserRole.CUSTOMER) {
            return ticketRepository.findByCustomer(user);
        } else {
            return ticketRepository.findAll(); // Engineers can see all tickets
        }
    }

    public List<Ticket> getUnassignedTickets() {
        return ticketRepository.findByAssignedEngineerIsNull();
    }

    public List<Ticket> getAssignedTickets(User engineer) {
        return ticketRepository.findByAssignedEngineer(engineer);
    }

    public Ticket acknowledgeTicket(Long ticketId, User engineer) {
        Ticket ticket = findById(ticketId);
        if (ticket != null && ticket.getAssignedEngineer() == null) {
            ticket.setAssignedEngineer(engineer);
            ticket.setStatus(TicketStatus.ACKNOWLEDGED);
            return updateTicket(ticket);
        }
        throw new EntityNotFoundException("Ticket not found or already assigned");
    }

    public Ticket acknowledgeTicket(Long ticketId, String engineerUsername) {
        User engineer = userService.findByUsername(engineerUsername);
        if (engineer != null && engineer.getRole() == UserRole.ENGINEER) {
            return acknowledgeTicket(ticketId, engineer);
        }
        throw new EntityNotFoundException("Engineer not found");
    }

    public Ticket reassignTicket(Long ticketId, Long newEngineerId, User currentEngineer) {
        if (currentEngineer.getRole() != UserRole.ENGINEER) {
            throw new RuntimeException("Only engineers can reassign tickets");
        }

        Ticket ticket = findById(ticketId);
        User newEngineer = userService.findById(newEngineerId);

        ticket.setAssignedEngineer(newEngineer);
        ticket.setUpdatedAt(LocalDateTime.now());

        return ticketRepository.save(ticket);
    }

    public void deleteTicket(Long id) {
        ticketRepository.deleteById(id);
    }

    public List<Ticket> getAllTickets() {
        return ticketRepository.findAll();
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\service\UserService.java ---
package ticketmanagement.ticketservicemanagementv100.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import ticketmanagement.ticketservicemanagementv100.entity.User;
import ticketmanagement.ticketservicemanagementv100.enums.UserRole;
import ticketmanagement.ticketservicemanagementv100.repository.UserRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class UserService {
    private final UserRepository userRepository;

    public User authenticate(String username, String password) {
        Optional<User> optionalUser = userRepository.findByUsernameAndPassword(username, password);
        return optionalUser.orElse(null);
    }

    public User findById(Long id) {
        return userRepository.findById(id).orElse(null);
    }

    public User findByUsername(String username) {
        return userRepository.findByUsername(username).orElse(null);
    }

    public List<User> findByRole(UserRole role) {
        return userRepository.findByRole(role);
    }

    public User findDefaultEngineer() {
        return userRepository.findByIsDefaultEngineerTrue().orElse(null);
    }

    public boolean isDefaultEngineer(User user) {
        return user != null && Boolean.TRUE.equals(user.getIsDefaultEngineer());
    }

    public User createUser(User user) {
        if (userRepository.existsByUsername(user.getUsername())) {
            throw new RuntimeException("Username already exists");
        }
        if (userRepository.existsByEmail(user.getEmail())) {
            throw new RuntimeException("Email already exists");
        }
        user.setCreatedAt(LocalDateTime.now());
        user.setUpdatedAt(LocalDateTime.now());
        return userRepository.save(user);
    }

    public User updateUser(User user) {
        user.setUpdatedAt(LocalDateTime.now());
        return userRepository.save(user);
    }

    public void deleteUser(Long id) {
        userRepository.deleteById(id);
    }

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\util\RoleValidator.java ---
package ticketmanagement.ticketservicemanagementv100.util;

import ticketmanagement.ticketservicemanagementv100.entity.User;
import ticketmanagement.ticketservicemanagementv100.entity.Ticket;
import ticketmanagement.ticketservicemanagementv100.enums.UserRole;

public class RoleValidator {

    public static boolean canAccessTicket(User user, Ticket ticket) {
        if (user.getRole() == UserRole.CUSTOMER) {
            return ticket.getCustomer().getId().equals(user.getId());
        }
        return user.getRole() == UserRole.ENGINEER; // Engineers can access all
    }

    public static boolean isCustomer(User user) {
        return user.getRole() == UserRole.CUSTOMER;
    }

    public static boolean isEngineer(User user) {
        return user.getRole() == UserRole.ENGINEER;
    }

    public static boolean isAdminEngineer(User user) {
        return user.getRole() == UserRole.ENGINEER &&
               Boolean.TRUE.equals(user.getIsDefaultEngineer());
    }
}

--- File: src\main\java\ticketmanagement\ticketservicemanagementv100\util\SecurityUtil.java ---
package ticketmanagement.ticketservicemanagementv100.util;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ticketmanagement.ticketservicemanagementv100.entity.User;
import ticketmanagement.ticketservicemanagementv100.exception.UnauthorizedException;
import ticketmanagement.ticketservicemanagementv100.service.UserService;

@Component
public class SecurityUtil {

    private static UserService userService;

    @Autowired
    public SecurityUtil(UserService userService) {
        SecurityUtil.userService = userService;
    }

    public static void validateUserAccess(Long userId, String role, String username) {
        User user = userService.findById(userId);
        if (user == null || !user.getRole().toString().equals(role) ||
            !user.getUsername().equals(username)) {
            throw new UnauthorizedException("Invalid user credentials");
        }
    }

    public static void validateRole(String actualRole, String requiredRole) {
        if (!requiredRole.equals(actualRole)) {
            throw new UnauthorizedException("Access denied for role: " + actualRole);
        }
    }

    public static User validateAndGetUser(Long userId, String role, String username) {
        validateUserAccess(userId, role, username);
        return userService.findById(userId);
    }
}

--- File: src\main\resources\application.properties ---
spring.application.name=ticket-service-management-v100

# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/ticketdb?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=root@1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=true

# File Upload Configuration
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Server Configuration
server.port=8080

# CORS Configuration
spring.web.cors.allowed-origins=*
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*

# Logging Configuration
logging.level.ticketmanagement.ticketservicemanagementv100=DEBUG
logging.level.org.springframework.web=DEBUG

--- File: src\test\java\ticketmanagement\ticketservicemanagementv100\TicketServiceManagementV100ApplicationTests.java ---
package ticketmanagement.ticketservicemanagementv100;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class TicketServiceManagementV100ApplicationTests {

    @Test
    void contextLoads() {
    }
}

--- File: target\classes\application.properties ---
spring.application.name=ticket-service-management-v100

# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/ticketdb?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=root@1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=true

# File Upload Configuration
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Server Configuration
server.port=8080

# CORS Configuration
spring.web.cors.allowed-origins=*
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*

# Logging Configuration
logging.level.ticketmanagement.ticketservicemanagementv100=DEBUG
logging.level.org.springframework.web=DEBUG